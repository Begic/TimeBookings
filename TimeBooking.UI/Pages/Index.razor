@page "/"

@inject IDialogService DialogService
@inject IUserProvider UserProvider
@inject ITimeBookingProvider TimeBookingProvider
@inject ISnackbar Toaster

<PageTitle>Übersicht</PageTitle>

<LoadingPage IsLoading="@(alluserinfos == null || allTimeBookings == null)">
    <DefaultLayout Title="Übersicht">
        <Actions>
            @if (hasBookingToday)
            {
                <MudTooltip Text="Einstempeln">
                    <MudButton Class="me-2" Color="@Color.Success" ButtonType="@ButtonType.Button" Variant="@Variant.Filled" OnClick="@OnClickAddTimeBookingDay" EndIcon="@Icons.Material.Filled.AddCircle">Einstempeln</MudButton>
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Ausstempeln">
                    <MudButton Color="@Color.Info" ButtonType="@ButtonType.Button" Variant="@Variant.Filled" OnClick="@OnClickEndTimeBooking" EndIcon="@Icons.Material.Filled.Square">Ausstempeln</MudButton>
                </MudTooltip>
            }
        </Actions>
        <Content>
            <MudDataGrid Items="@allTimeBookings"
                         RowsPerPage="10"
                         Dense="@true"
                         Striped="@true"
                         Hover="@true"
                         Virtualize="@true">
                <Columns>
                    <PropertyColumn Title="Tag" Property="@(x => x.BookingDay)" Format="d"/>
                    <PropertyColumn Title="Kommentar" Property="@(x => x.Remark)"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudTooltip Text="Bearbeiten">
                                    <MudFab Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => OnClickEdit(context.Item)"/>
                                </MudTooltip>
                                <MudTooltip Text="Löschen">
                                    <MudFab Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => OnDelete(context.Item)"/>
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </Content>
    </DefaultLayout>
</LoadingPage>


@code
{
    private List<UserInfo> alluserinfos;
    private UserInfo? currentUser;
    private List<TimeBookingDayInfo> allTimeBookings;
    private bool hasBookingToday;

    private DialogOptions options = new DialogOptions
        {
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            CloseButton = false,
            CloseOnEscapeKey = false,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        alluserinfos = await UserProvider.GetAllUserInfos();
        currentUser = alluserinfos.FirstOrDefault();

        await LoadTimeBookings();

        StateHasChanged();
    }

    private async Task LoadTimeBookings()
    {
        allTimeBookings = await TimeBookingProvider.GetAllTimeBookings();
        if (currentUser != null)
        {
            allTimeBookings = allTimeBookings.Where(x => x.UserId == currentUser.Id).ToList();
        }

        hasBookingToday = !allTimeBookings.Any(x => x.BookingDay.Day == DateTime.Today.Day);
    }

    private async Task OnClickAddTimeBookingDay()
    {
        var result = await DialogService.ShowAsync<DialogBooking>(string.Empty, new DialogParameters
        {
            { nameof(DialogBooking.CurrentUser), currentUser },
        }, options);

        var ka = await result.Result;
        await Refresh();
    }

    private async Task OnClickEndTimeBooking()
    {
        await TimeBookingProvider.StampOut();
        Toaster.Add("Erfolgreich ausgestempelt", Severity.Info);

        await Refresh();
    }

    private async Task OnClickEdit(TimeBookingDayInfo? item)
    {
        var result = await DialogService.ShowAsync<DialogBooking>(string.Empty, new DialogParameters
        {
            { nameof(DialogBooking.CurrentUser), currentUser },
            { nameof(DialogBooking.TimeBookingDay), item },
        }, options);

        var ka = await result.Result;
        await Refresh();
    }

    private async Task OnDelete(TimeBookingDayInfo? item)
    {

        {
            var result = await DialogService.ShowAsync<DialogDelete>("Achtung!", new DialogParameters(), new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    DisableBackdropClick = true
                });

            if ((bool)(await result.Result).Data)
            {
                await TimeBookingProvider.DeleteTimeBookingDay(item.Id);
                Toaster.Add("Erfolgreich gelöscht", Severity.Info);
                await Refresh();
            }
        }
    }
}