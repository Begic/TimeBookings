@inject ITimeBookingProvider TimeBookingProvider
@inject ITimeBookingDetailProvider TimeBookingDetailProvider
@inject IDialogService DialogService
@inject ISnackbar Toaster

<EditForm Model="@editModel" OnValidSubmit="@AddTimeBooking">
    <FluentValidationValidator/>
    <MudDialog>
        <TitleContent>
            @if (TimeBookingDay == null)
            {
                <MudText>Zeitbuchung vom @editModel.BookingDay?.Date.ToString("d") hinzufügen</MudText>
            }
            else
            {
                <MudText>Zeitbuchung vom @editModel.BookingDay?.Date.ToString("d") bearbeiten</MudText>
            }
        </TitleContent>
        <DialogContent>
            <MudGrid Class="mb-6">
                <MudItem md="12">
                    <MudTextField Label="Kommentar" @bind-Value="@editModel.Remark" For="@(() => editModel.Remark)" Lines="3"></MudTextField>
                </MudItem>

                @if (TimeBookingDay != null)
                {
                    <MudItem md="12">
                        <DefaultLayout>
                            <Actions>
                                @if (editModel != null && editModel.TimeBookingDetails.All(x => x.EndTime != null))
                                {
                                    <MudTooltip Text="Einstempeln">
                                        <MudFab Class="me-2" Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" OnClick="@OnClickStampIn">Einstempeln</MudFab>
                                    </MudTooltip>
                                }

                                @if (editModel != null && editModel.TimeBookingDetails.Any(x => x.EndTime == null))
                                {
                                    <MudTooltip Text="Ausstempeln">
                                        <MudFab Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Info" StartIcon="@Icons.Material.Filled.Square" OnClick="@OnClickStampOut">Ausstempeln</MudFab>
                                    </MudTooltip>
                                }
                                
                            </Actions>
                            <Content>
                                <MudDataGrid Items="@editModel.TimeBookingDetails"
                                             RowsPerPage="10"
                                             Dense="@true"
                                             Striped="@true"
                                             Hover="@true"
                                             Virtualize="@true">
                                    <Columns>
                                        <PropertyColumn Title="Start" Property="@(x => x.StartTime)">
                                            <CellTemplate Context="edit">
                                                @((edit.Item.BookingDate + edit.Item.StartTime)?.ToString("HH:mm"))
                                            </CellTemplate>
                                        </PropertyColumn >
                                        <PropertyColumn Title="Ende" Property="@(x => x.EndTime)">
                                            <CellTemplate Context="edit">
                                                @((edit.Item.BookingDate + edit.Item.EndTime)?.ToString("HH:mm"))
                                            </CellTemplate>
                                        </PropertyColumn>
                                        <PropertyColumn Title="Kommentar" Property="@(x => x.Remark)"/>
                                        <TemplateColumn >
                                            <CellTemplate Context="edit">
                                                <MudStack Row>
                                                    <MudTooltip Text="Bearbeiten">
                                                        <MudFab Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => OnClickEditStamping(edit.Item))"/>
                                                    </MudTooltip>
                                                    <MudTooltip Text="Löschen">
                                                        <MudFab Size="@Size.Small" IconSize="@Size.Small" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => OnDelete(edit.Item))"/>
                                                    </MudTooltip>
                                                </MudStack>
                                            </CellTemplate>
                                        </TemplateColumn>
                                    </Columns>
                                </MudDataGrid>
                            </Content>
                        </DefaultLayout>
                    </MudItem>
                }
            </MudGrid>

        </DialogContent>
        <DialogActions>
            <MudButton Color="@Color.Success" Variant="@Variant.Filled" ButtonType="@ButtonType.Submit" EndIcon="@Icons.Material.Filled.Save">Hinzufügen</MudButton>
            <MudButton Color="@Color.Warning" Variant="@Variant.Filled" ButtonType="@ButtonType.Button" EndIcon="@Icons.Material.Filled.Cancel" OnClick="@OnClickCancel">Abbrechen</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserInfo CurrentUser { get; set; }
    [Parameter] public TimeBookingDayInfo? TimeBookingDay { get; set; }

    private EditTimeBookingDay editModel = new();

    private DialogOptions options = new DialogOptions
    {
        DisableBackdropClick = true,
        Position = DialogPosition.Center,
        CloseButton = false,
        CloseOnEscapeKey = false,
        FullWidth = true,
        MaxWidth = MaxWidth.Medium
    };

    protected override async Task OnInitializedAsync()
    {
        if (TimeBookingDay != null)
        {
            editModel = new EditTimeBookingDay()
            {
                Id = TimeBookingDay.Id,
                BookingDay = TimeBookingDay.BookingDay,
                Remark = TimeBookingDay.Remark,
                TimeBookingDetails = TimeBookingDay.TimeBookingDetails.Select(x => new EditTimeBookingDetail()
                {
                    Id = x.Id,
                    BookingDate = x.StartTime.Date,
                    StartTime = x.StartTime.TimeOfDay,
                    EndTime = x.EndTime?.TimeOfDay,
                    Remark = x.Remark
                }).ToList()
            };
        }
        else
        {
            editModel = new EditTimeBookingDay
            {
                BookingDay = DateTime.Today,
            };
        }

        await Refresh();
    }

    private async Task Refresh()
    {
        
        StateHasChanged();
    }

    private async Task AddTimeBooking()
    {
        await TimeBookingProvider.AddTimeBookingDay(CurrentUser, editModel);
        Toaster.Add("Erfolgreich gespeichert", Severity.Success);
        MudDialog.Close(true);
    }

    private void OnClickCancel()
    {
        Toaster.Add("Erfolgreich abgebrochen", Severity.Info);
        MudDialog.Close();
    }

    private async Task OnClickStampIn()
    {
        await TimeBookingDetailProvider.StampIn(CurrentUser, editModel.Id);
        Toaster.Add("Erfolgreich eingestempelt", Severity.Success);
        await Refresh();
    }

    private async Task OnClickStampOut()
    {
        await TimeBookingDetailProvider.StampOut(CurrentUser, editModel.Id);
        Toaster.Add("Erfolgreich ausgestempelt", Severity.Success);
        await Refresh();
    }

    private async Task OnClickEditStamping(EditTimeBookingDetail? info)
    {
        var result = await DialogService.ShowAsync<DialogEditStamping>(string.Empty, new DialogParameters
        {
            { nameof(DialogEditStamping.EditTimeBookingDetail), info },
        }, options);

        var ka = await result.Result;
        await Refresh();
    }

    private async Task OnDelete(EditTimeBookingDetail? item)
    {
        var result = await DialogService.ShowAsync<DialogDelete>("Achtung!", new DialogParameters(), new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true
        });

        if ((bool)(await result.Result).Data)
        {
            await TimeBookingDetailProvider.DeleteTimeStamping(item.Id);
            Toaster.Add("Erfolgreich gelöscht", Severity.Success);
            await Refresh();
        }
    }
}